void TIM_Configuration(void)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    GPIO_InitTypeDef    GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4 , ENABLE);
    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; //TIM3的1、2通道    ，产生PWM
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA,&GPIO_InitStructure);       //PA的6，7口对应TIM3的1、2通道，设置为复用推挽输出

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9; //TIM4的1、2、3、4通道
    GPIO_Init(GPIOB,&GPIO_InitStructure);     //B口的6，7，8，9对应TIM4的1、2、3、4通道，设置为复用推挽输出

    TIM_TimeBaseStructure.TIM_Period =9999;           //自动重载周期值
    TIM_TimeBaseStructure.TIM_Prescaler =143;          //预分频值 ,这里是50HZ
    TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;        //时钟分割
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;      //计数摸式为向上计数
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);         //TIM3,和TIM4用的相同配置，写入配置  ,PWM频率为50HZ
                                                                      
    //设定占空比
    
    TIM_OCStructInit(& TIM_OCInitStructure);      //恢复初始
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;  //定时器模式为pwm模式1
    TIM_OCInitStructure.TIM_Pulse =0;              //脉冲值，即输出都是低电平
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;     //极性为高
    
    TIM_OC1Init(TIM3, &TIM_OCInitStructure);     //将配置数据写入TIM3的通道1
    TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);    //预装载使能
    TIM_OC2Init(TIM3, &TIM_OCInitStructure);
    TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);

    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC2Init(TIM4, &TIM_OCInitStructure);
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC3Init(TIM4, &TIM_OCInitStructure);
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC4Init(TIM4, &TIM_OCInitStructure);
    TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);//TIM4的4个通道都用相同的配置
    TIM_Cmd(TIM3, ENABLE);
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    TIM_Cmd(TIM4, ENABLE);
    TIM_CtrlPWMOutputs(TIM4, ENABLE);          //使能PWM模式
}

void SetJointAngle(u8 ID, float angle)
{
    switch(ID)
    {
        case 0:                                      //-90°~90°   
            angle=angle+90.0;                      
            angle=(u16)(50.0*angle/9.0+249.0);     
            TIM_SetCompare1(TIM3,angle);        
            break;
                                                 //0°~180°
        case 1:
            angle=(u16)(4.175*angle+409.25);
            TIM_SetCompare2(TIM3,angle);          
            break;


        case 2:                                    //-150°~0°
            angle=-angle;
            angle=(u16)(4.175*angle+480.0);
            TIM_SetCompare1(TIM4,angle);
            break;

        case 3:
            angle=-180-angle;
            angle=-angle;
            angle=(u16)(4.175*angle+315.0);
        

            TIM_SetCompare2(TIM4,angle);
            break;
                                              //-90°~90°
        case 4:
            angle=90.0+angle;
            angle=(u16)(249.0+50.0*angle/9.0);
            TIM_SetCompare3(TIM4,angle);            
            break; 


        default: break;
    }    
}